{"mappings":"AAAA,MAAM,CAAC,GAAG,GAAG;IACT,kBAAQ;IACE,MAAJ,EAAC,MAAM,EAAE;QACX,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,AAAC;QACrD,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QACpC,OAAO,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC;KACvC;IACD,qBAAS;IACG,KAAP,EAAC,IAAI,EAAE,KAAK,EAAE;QACf,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KACzD;IACD,qBAAS;IACG,MAAN,EAAC,IAAI,EAAE,KAAK,EAAE;QAChB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAC7C;IACD,kBAAQ;IACE,MAAJ,EAAC,MAAM,EAAE,IAAI,EAAE;QACjB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;KAC3B;IACD,qBAAS;IACG,IAAR,EAAC,IAAI,EAAE,MAAM,EAAE;QACf,GAAG,CAAC,MAAM,CAAC,IAAI,EAAC,MAAM,CAAC;QACvB,GAAG,CAAC,MAAM,CAAC,MAAM,EAAC,IAAI,CAAC;KAC1B;IACD,eAAO;IACC,MAAF,EAAC,IAAI,EAAE;QACT,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;QACjC,OAAO,IAAI,CAAA;KACd;IACD,eAAO;IACC,KAAH,EAAC,IAAI,EAAE;QACR,MAAM,KAAK,GAAG,EAAE;QAChB,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU;QACvB,MAAO,CAAC,CAAE;YACN,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACvC,CAAC,GAAG,IAAI,CAAC,UAAU;SACtB;QACD,OAAO,KAAK,CAAA;KACf;IACD,2BAAW;IACK,IAAZ,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;QACpB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EACtB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC;aAC3B,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;KAE9B;IACD,6BAAa;IACG,IAAZ,EAAC,IAAI,EAAE,MAAM,EAAE;QACf,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;YACxB,IAAI,WAAW,IAAI,IAAI,EACrB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAE,IAAI;YAAN;iBAEvB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAE,QAAI;YAAN;eAErB,IAAA,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,IAAI,WAAW,IAAI,IAAI,EAC3B,OAAO,IAAI,CAAC,SAAS,CAAA;iBAErB,OAAO,IAAI,CAAC,WAAW,CAAA;SAExB;KACF;IACD,mBAAW;IACH,IAAJ,EAAC,IAAI,EAAE,MAAM,EAAE;QACf,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EACtB,IAAI,CAAC,SAAS,GAAG,MAAM;aACpB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAC9B,OAAO,IAAI,CAAC,SAAS,CAAA;KAE3B;IACD,cAAU;IACN,KAAC,EAAC,IAAI,EAAE,IAAI,EAAC,KAAK,EAAE;QACpB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;aAC5B,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/B,IAAI,OAAO,IAAI,KAAK,QAAQ,EACxB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;iBACrB,IAAI,IAAI,YAAY,MAAM,EAAE;gBAC9B,MAAM,MAAM,GAAG,IAAI;gBACnB,IAAK,IAAI,GAAG,IAAI,MAAM,CAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;aAEpC;SACJ;KAEJ;IACD,QAAQ;IACR,KAAK,EAAE;QACH,GAAG,EAAC,IAAI,EAAE,SAAS,EAAE;YACjB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;SAChC;QACD,MAAM,EAAC,IAAI,EAAE,SAAS,EAAE;YACpB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;SACnC;QACD,QAAQ,EAAC,IAAI,EAAE,SAAS,EAAE;YACtB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;SAC5C;KACJ;IACD,qBAAS;IACG,EAAV,EAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;QACpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAC,EAAE,CAAC;KACtC;IACD,qBAAS;IACG,GAAT,EAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;QACrB,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAC,EAAE,CAAC;KACzC;IACD,eAAO;IACC,IAAJ,EAAC,QAAQ,EAAC,KAAK,EAAE;QACjB,OAAO,AAAC,CAAA,KAAK,IAAI,QAAQ,CAAA,CAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAA;KACxD;IACD,kBAAQ;IACE,MAAJ,EAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC,UAAU,CAAA;KACzB;IACD,kBAAQ;IACE,QAAF,EAAC,IAAI,EAAE;QACX,OAAO,IAAI,CAAC,YAAY,CAAA;KAC3B;IACD,qBAAS;IACG,QAAJ,EAAC,IAAI,EAAE;QACX,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC1C,MAAM,CAAC,CAAA,CAAC,GAAI,CAAC,KAAK,IAAI,CAAC,CAAA;KAC3B;IACD,wBAAU;IACI,IAAV,EAAC,IAAI,EAAE;QACP,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW;QACxB,MAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,CAAC,CACxB,CAAC,GAAG,CAAC,CAAC,WAAW;QAErB,OAAO,CAAC,CAAA;KACX;IACD,wBAAU;IACI,QAAN,EAAC,IAAI,EAAE;QACX,MAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,CAAC,CACxB,CAAC,GAAG,CAAC,CAAC,eAAe;QAEzB,OAAO,CAAC,CAAA;KACX;IACD,qBAAS;IACG,IAAR,EAAC,QAAQ,EAAC,EAAE,EAAE;QACd,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,CAC7B,EAAE,CAAC,IAAI,CAAC,IAAI,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KAEhC;IACD,qBAAS;IACT,KAAK,EAAC,IAAI,EAAE;QACR,MAAM,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;QAC1C,IAAI,CAAC;QACL,IAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;YAC7B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAChB,MAAK;SAEZ;QACD,OAAO,CAAC,CAAA;KACX;CACJ,CAAC","sources":["src/dom.js"],"sourcesContent":["window.dom = {\r\n    // 创建新节点\r\n    create(string) {\r\n        const container = document.createElement('template');\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    // 新增弟弟元素\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    // 新增哥哥元素\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    // 新增子节点\r\n    append(parent, node) {\r\n        parent.appendChild(node)\r\n    },\r\n    // 新增父亲节点\r\n    wrap(node, parent) {\r\n        dom.before(node,parent)\r\n        dom.append(parent,node)\r\n    },\r\n    // 删除节点\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    },\r\n    // 删除后代\r\n    empty(node) {\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n    // 读写属性（重载）\r\n    attr(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 3) {\r\n            node.getAttribute(name)\r\n        }\r\n    },\r\n    // 读写文本内容(适配)\r\n    text(node, string) {\r\n        if (arguments.length === 2) {\r\n          if ('innerText' in code) {\r\n            node.innerText = string  //IE\r\n        } else {\r\n            node.textContent = string  //其他\r\n        }  \r\n      }else if (arguments.length === 1) {\r\n            if ('innerText' in code) {\r\n        return node.innerText\r\n        } else {\r\n        return node.textContent\r\n        }  \r\n      }      \r\n    },\r\n    // 读写HTML内容\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n           return node.innerHTML \r\n        }\r\n    },\r\n    // 修改style\r\n    style(node, name,value) {\r\n        if (arguments.length === 3) {\r\n            node.style[name] = object[name]\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                return node.style[name]\r\n            }else if (name instanceof Object) {\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n        \r\n    },\r\n    // class\r\n    Class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        contains(node, className) {\r\n            return node.classList.contains(className)\r\n        },\r\n    },\r\n    // 添加事件监听\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName,fn)\r\n    },\r\n    // 删除事件监听\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName,fn)\r\n    },\r\n    // 获取标签\r\n    find(selector,scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    // 获取父元素\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    // 获取子元素\r\n    children(node) {\r\n        return node.childrenNode\r\n    },\r\n    // 获取兄弟元素\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n        .filter(n => n !== node)\r\n    },\r\n    // 获取下一个节点\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    // 获取上一个节点\r\n    previous(node) {\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    // 遍历所有节点\r\n    each(nodeList,fn) {\r\n        for (let i = 0; i < nodeList; i++){\r\n            fn.call(null,nodeList[i])\r\n        }\r\n    },\r\n    // 获取元素排行\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++){\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n};\r\n"],"names":[],"version":3,"file":"index.755bdb92.js.map","sourceRoot":"/__parcel_source_root/"}